/*
 * This file is generated by jOOQ.
 */
package src.main.java.com.jnutz.jooq.public_.tables.records;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import src.main.java.com.jnutz.jooq.public_.tables.Ingredients;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class IngredientsRecord extends UpdatableRecordImpl<IngredientsRecord> implements Record2<Short, Short>
{
    
    private static final long serialVersionUID = -1021061322;
    
    /**
     * Setter for <code>PUBLIC.Ingredients.Id</code>.
     */
    public void setId(Short value)
    {
        set(0, value);
    }
    
    /**
     * Getter for <code>PUBLIC.Ingredients.Id</code>.
     */
    public Short getId()
    {
        return (Short) get(0);
    }
    
    /**
     * Setter for <code>PUBLIC.Ingredients.Item_Id</code>.
     */
    public void setItemId(Short value)
    {
        set(1, value);
    }
    
    /**
     * Getter for <code>PUBLIC.Ingredients.Item_Id</code>.
     */
    public Short getItemId()
    {
        return (Short) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------
    
    @Override
    public Record1<Short> key()
    {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------
    
    @Override
    public Row2<Short, Short> fieldsRow()
    {
        return (Row2) super.fieldsRow();
    }
    
    @Override
    public Row2<Short, Short> valuesRow()
    {
        return (Row2) super.valuesRow();
    }
    
    @Override
    public Field<Short> field1()
    {
        return Ingredients.INGREDIENTS.ID;
    }
    
    @Override
    public Field<Short> field2()
    {
        return Ingredients.INGREDIENTS.ITEM_ID;
    }
    
    @Override
    public Short component1()
    {
        return getId();
    }
    
    @Override
    public Short component2()
    {
        return getItemId();
    }
    
    @Override
    public Short value1()
    {
        return getId();
    }
    
    @Override
    public Short value2()
    {
        return getItemId();
    }
    
    @Override
    public IngredientsRecord value1(Short value)
    {
        setId(value);
        return this;
    }
    
    @Override
    public IngredientsRecord value2(Short value)
    {
        setItemId(value);
        return this;
    }
    
    @Override
    public IngredientsRecord values(Short value1, Short value2)
    {
        value1(value1);
        value2(value2);
        return this;
    }
    
    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------
    
    /**
     * Create a detached IngredientsRecord
     */
    public IngredientsRecord()
    {
        super(Ingredients.INGREDIENTS);
    }
    
    /**
     * Create a detached, initialised IngredientsRecord
     */
    public IngredientsRecord(Short id, Short itemId)
    {
        super(Ingredients.INGREDIENTS);
        
        set(0, id);
        set(1, itemId);
    }
}
