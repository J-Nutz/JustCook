/*
 * This file is generated by jOOQ.
 */
package src.main.java.com.jnutz.jooq.public_.tables.records;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import src.main.java.com.jnutz.jooq.public_.tables.Ingredients;

import javax.annotation.processing.Generated;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = {"http://www.jooq.org", "jOOQ version:3.12.3"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class IngredientsRecord extends UpdatableRecordImpl<IngredientsRecord> implements Record5<Short, String, String, String, Short>
{
    
    private static final long serialVersionUID = 830110601;
    
    /**
     * Setter for <code>PUBLIC.Ingredients.ID</code>.
     */
    public void setId(Short value)
    {
        set(0, value);
    }
    
    /**
     * Getter for <code>PUBLIC.Ingredients.ID</code>.
     */
    public Short getId()
    {
        return (Short) get(0);
    }
    
    /**
     * Setter for <code>PUBLIC.Ingredients.Name</code>.
     */
    public void setName(String value)
    {
        set(1, value);
    }
    
    /**
     * Getter for <code>PUBLIC.Ingredients.Name</code>.
     */
    public String getName()
    {
        return (String) get(1);
    }
    
    /**
     * Setter for <code>PUBLIC.Ingredients.Type</code>.
     */
    public void setType(String value)
    {
        set(2, value);
    }
    
    /**
     * Getter for <code>PUBLIC.Ingredients.Type</code>.
     */
    public String getType()
    {
        return (String) get(2);
    }
    
    /**
     * Setter for <code>PUBLIC.Ingredients.Measurement</code>.
     */
    public void setMeasurement(String value)
    {
        set(3, value);
    }
    
    /**
     * Getter for <code>PUBLIC.Ingredients.Measurement</code>.
     */
    public String getMeasurement()
    {
        return (String) get(3);
    }
    
    /**
     * Setter for <code>PUBLIC.Ingredients.Stock_Amount</code>.
     */
    public void setStockAmount(Short value)
    {
        set(4, value);
    }
    
    /**
     * Getter for <code>PUBLIC.Ingredients.Stock_Amount</code>.
     */
    public Short getStockAmount()
    {
        return (Short) get(4);
    }
    
    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------
    
    @Override
    public Record1<Short> key()
    {
        return (Record1) super.key();
    }
    
    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------
    
    @Override
    public Row5<Short, String, String, String, Short> fieldsRow()
    {
        return (Row5) super.fieldsRow();
    }
    
    @Override
    public Row5<Short, String, String, String, Short> valuesRow()
    {
        return (Row5) super.valuesRow();
    }
    
    @Override
    public Field<Short> field1()
    {
        return Ingredients.INGREDIENTS.ID;
    }
    
    @Override
    public Field<String> field2()
    {
        return Ingredients.INGREDIENTS.NAME;
    }
    
    @Override
    public Field<String> field3()
    {
        return Ingredients.INGREDIENTS.TYPE;
    }
    
    @Override
    public Field<String> field4()
    {
        return Ingredients.INGREDIENTS.MEASUREMENT;
    }
    
    @Override
    public Field<Short> field5()
    {
        return Ingredients.INGREDIENTS.STOCK_AMOUNT;
    }
    
    @Override
    public Short component1()
    {
        return getId();
    }
    
    @Override
    public String component2()
    {
        return getName();
    }
    
    @Override
    public String component3()
    {
        return getType();
    }
    
    @Override
    public String component4()
    {
        return getMeasurement();
    }
    
    @Override
    public Short component5()
    {
        return getStockAmount();
    }
    
    @Override
    public Short value1()
    {
        return getId();
    }
    
    @Override
    public String value2()
    {
        return getName();
    }
    
    @Override
    public String value3()
    {
        return getType();
    }
    
    @Override
    public String value4()
    {
        return getMeasurement();
    }
    
    @Override
    public Short value5()
    {
        return getStockAmount();
    }
    
    @Override
    public IngredientsRecord value1(Short value)
    {
        setId(value);
        return this;
    }
    
    @Override
    public IngredientsRecord value2(String value)
    {
        setName(value);
        return this;
    }
    
    @Override
    public IngredientsRecord value3(String value)
    {
        setType(value);
        return this;
    }
    
    @Override
    public IngredientsRecord value4(String value)
    {
        setMeasurement(value);
        return this;
    }
    
    @Override
    public IngredientsRecord value5(Short value)
    {
        setStockAmount(value);
        return this;
    }
    
    @Override
    public IngredientsRecord values(Short value1, String value2, String value3, String value4, Short value5)
    {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }
    
    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------
    
    /**
     * Create a detached IngredientsRecord
     */
    public IngredientsRecord()
    {
        super(Ingredients.INGREDIENTS);
    }
    
    /**
     * Create a detached, initialised IngredientsRecord
     */
    public IngredientsRecord(Short id, String name, String type, String measurement, Short stockAmount)
    {
        super(Ingredients.INGREDIENTS);
        
        set(0, id);
        set(1, name);
        set(2, type);
        set(3, measurement);
        set(4, stockAmount);
    }
}
