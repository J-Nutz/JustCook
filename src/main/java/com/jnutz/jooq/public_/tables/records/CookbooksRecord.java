/*
 * This file is generated by jOOQ.
 */
package src.main.java.com.jnutz.jooq.public_.tables.records;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import src.main.java.com.jnutz.jooq.public_.tables.Cookbooks;

import javax.annotation.processing.Generated;

/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class CookbooksRecord extends UpdatableRecordImpl<CookbooksRecord> implements Record3<Short, String, Short>
{
    
    private static final long serialVersionUID = 367499513;
    
    /**
     * Setter for <code>PUBLIC.Cookbooks.Id</code>.
     */
    public void setId(Short value)
    {
        set(0, value);
    }
    
    /**
     * Getter for <code>PUBLIC.Cookbooks.Id</code>.
     */
    public Short getId()
    {
        return (Short) get(0);
    }
    
    /**
     * Setter for <code>PUBLIC.Cookbooks.Name</code>.
     */
    public void setName(String value)
    {
        set(1, value);
    }
    
    /**
     * Getter for <code>PUBLIC.Cookbooks.Name</code>.
     */
    public String getName()
    {
        return (String) get(1);
    }
    
    /**
     * Setter for <code>PUBLIC.Cookbooks.Recipes_Id</code>.
     */
    public void setRecipesId(Short value)
    {
        set(2, value);
    }
    
    /**
     * Getter for <code>PUBLIC.Cookbooks.Recipes_Id</code>.
     */
    public Short getRecipesId()
    {
        return (Short) get(2);
    }
    
    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------
    
    @Override
    public Record1<Short> key()
    {
        return (Record1) super.key();
    }
    
    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------
    
    @Override
    public Row3<Short, String, Short> fieldsRow()
    {
        return (Row3) super.fieldsRow();
    }
    
    @Override
    public Row3<Short, String, Short> valuesRow()
    {
        return (Row3) super.valuesRow();
    }
    
    @Override
    public Field<Short> field1()
    {
        return Cookbooks.COOKBOOKS.ID;
    }
    
    @Override
    public Field<String> field2()
    {
        return Cookbooks.COOKBOOKS.NAME;
    }
    
    @Override
    public Field<Short> field3()
    {
        return Cookbooks.COOKBOOKS.RECIPES_ID;
    }
    
    @Override
    public Short component1()
    {
        return getId();
    }
    
    @Override
    public String component2()
    {
        return getName();
    }
    
    @Override
    public Short component3()
    {
        return getRecipesId();
    }
    
    @Override
    public Short value1()
    {
        return getId();
    }
    
    @Override
    public String value2()
    {
        return getName();
    }
    
    @Override
    public Short value3()
    {
        return getRecipesId();
    }
    
    @Override
    public CookbooksRecord value1(Short value)
    {
        setId(value);
        return this;
    }
    
    @Override
    public CookbooksRecord value2(String value)
    {
        setName(value);
        return this;
    }
    
    @Override
    public CookbooksRecord value3(Short value)
    {
        setRecipesId(value);
        return this;
    }
    
    @Override
    public CookbooksRecord values(Short value1, String value2, Short value3)
    {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }
    
    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------
    
    /**
     * Create a detached CookbooksRecord
     */
    public CookbooksRecord()
    {
        super(Cookbooks.COOKBOOKS);
    }
    
    /**
     * Create a detached, initialised CookbooksRecord
     */
    public CookbooksRecord(Short id, String name, Short recipesId)
    {
        super(Cookbooks.COOKBOOKS);
        
        set(0, id);
        set(1, name);
        set(2, recipesId);
    }
}
